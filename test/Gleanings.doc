Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows.                  
While Git is a tool that's used to manage multiple versions of source code edits that are then transferred to files in a Git repository, GitHub serves as a location for uploading copies of a Git repository.

Some Git command lines and functions includes;

1. git add: Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.

2. git branch: This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.

3. git clone: Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.

4. git commit: Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.

5. git config: A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine.

6. git fetch: Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.

7. git init: Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.

8. git merge: A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.

9. git pull: Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. 

10. git push: Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions.

11. git log: Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.

12. git reset: Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.

13. git status: Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s being included in the next snapshot.

14. git revert: Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.

15. git checkout: In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development.


